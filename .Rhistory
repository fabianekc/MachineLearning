a<-1; b<-2
# Setup
library(knitr)
library(lattice)
library(ggplot2)
library(gridExtra) # install.packages("gridExtra")
library(openxlsx)  # install.packages("openxlsx")
knit_hooks$set(inline = function(x) {
if (is.numeric(x)) {
prettyNum(x, big.mark=",", decimal.mark = ".",
digits = nchar(toString(prettyNum(x,
big.mark=",",
decimal.mark = ".",
digits=0)))+1)
} else {
x
}
})
options(scipen = 10, digits = 2)
theta <- NA
# Config
my_file = "/Users/christoph/cs/erste/results.xlsx"
#my_file <- "d:/hyve/erste/results.xlsx"
my_sheet = 1 # 2013 data
year = "2013"
my_col <- 1; theta <- 1223.55; init_price <- 1675.83  # 2013 ounce of gold in USD
#my_col <- 2; theta <- 25.6;    init_price <- 24.67    # 2013 EG share price
#my_col <- 3; theta <- 4.4955;  init_price <- 4.4363   # 2013 EUR RON exchange
#my_col = 4 # 2013 Hungary Credit default swap
#my_sheet = 2 # 2014 data
#year = "2014"
#my_col <- 1; theta <- 19.445;  init_price <- 25.6     # 2014 EG share price
#my_col <- 2; theta <- 27.693;  init_price <- 27.525   # 2014 EUR CZK exchange
#my_col <- 3; theta <- 0.076;   init_price <- 0.284    # 2014 3M Euribor
#my_col <- 4; theta <- 976.68;  init_price <- 873.27   # 2014 ounce of gold in EUR
# read data
data <- read.xlsx(my_file,my_sheet)
title <- colnames(data)[my_col]
data <- data[,my_col]
vals <- data[!is.na(data)]
# pre-processing
my_infos <- summary(vals)
c <- mean(vals)            # c ... crwod prediction
n <- length(vals)          # n ... participants
div <- sum((vals - c)^2)/n # div ... diverstiy
vals
1750-1223,55
1750-1223.55
1675.83-1531.11
1531.11-1223.55
vals
theta
vals[<theta]
vals[vals<theta]
vals<theta
a <-1
a+=2
theta <- NA
theta == NA
is.na(theta)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
package_version("AppliedPredictiveModeling")
package_version(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
hist(train$Superplasticizer)
hist(training$Superplasticizer)
hist(training$Superplasticizer)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
str(training)
training[,grepl("IL_", names(training))]
str(training[,grepl("IL_", names(training))])
str(training[,grepl("^IL_", names(training))])
myDat<-training[,grepl("^IL_", names(training))]
modelFit <- train()
preProc <- preProcess(myDat, method="pca")
trainPC <- predict(preProc, myDat)
modelFit <- train(training$diagnosis ~ ., method="glm", data = trainPC)
str(training[,c(grepl("^IL_", names(training)), "diagnosis"])
str(training[,c(grepl("^IL_", names(training)), "diagnosis")])
str(training[,grepl("^IL_", names(training))])
str(training[,grepl("^IL_|diagnosis", names(training))])
myDat<-training[,grepl("^IL_|diagnosis", names(training))]
preProc <- preProcess(myDat, method="pca")
preProc <- preProcess(myDat[, -diagnosis], method="pca")
str(myDat)
myDat[,-1]
str(myDat[,-1])
preProc <- preProcess(myDat[,-1], method="pca")
trainPC <- predict(preProc, myDat[-1])
modelFit <- train(myDat$diagnosis ~ ., method="glm", data=myDat)
install.packages('e1071', dependencies=TRUE)
modelFit <- train(myDat$diagnosis ~ ., method="glm", data=myDat)
myDat<-training[,grepl("^IL_|diagnosis", names(training))]
preProc <- preProcess(myDat[,-1], method="pca")
trainPC <- predict(preProc, myDat[-1])
modelFit <- train(myDat$diagnosis ~ ., method="glm", data=myDat)
testPC <- predict(preProc, testing)
myTraining<-training[,grepl("^IL_|diagnosis", names(training))]
myTesting <- testing[,grepl("^IL_|diagnosis", names(testing))]
preProc <- preProcess(myDat[,-1], method="pca")
trainPC <- predict(preProc, myDat[-1])
modelFit <- train(myDat$diagnosis ~ ., method="glm", data=myDat)
testPC <- predict(preProc, myTesting[,-1])
confusionMatrix(myTesting$diagnosis, predict(modelFit, testPC))
myTraining<-training[,grepl("^IL_|diagnosis", names(training))]
myTesting <- testing[,grepl("^IL_|diagnosis", names(testing))]
preProc <- preProcess(myTraining[,-1], method="pca")
trainPC <- predict(preProc, myTraining[-1])
modelFit <- train(myTraining$diagnosis ~ ., method="glm", data=myTraining)
testPC <- predict(preProc, myTesting[,-1])
confusionMatrix(myTesting$diagnosis, predict(modelFit, testPC))
str(myTesting)
str(myTraining)
myTraining<-training[,grepl("^IL_|diagnosis", names(training))]
myTesting <- testing[,grepl("^IL_|diagnosis", names(testing))]
preProc <- preProcess(myTraining[,-1], method="pca")
trainPC <- predict(preProc, myTraining[,-1])
modelFit <- train(myTraining$diagnosis ~ ., method="glm", data=myTraining)
testPC <- predict(preProc, myTesting[,-1])
confusionMatrix(myTesting$diagnosis, predict(modelFit, testPC))
confusionMatrix(myTesting$diagnosis, predict(modelFit, trainPC))
confusionMatrix(myTraining$diagnosis, predict(modelFit, trainPC))
myTraining<-training[,grepl("^IL|diagnosis", names(training))]
myTesting <- testing[,grepl("^IL|diagnosis", names(testing))]
preProc <- preProcess(myTraining[,-1], method="pca")
trainPC <- predict(preProc, myTraining[,-1])
modelFit <- train(myTraining$diagnosis ~ ., method="glm", data=myTraining)
confusionMatrix(myTraining$diagnosis, predict(modelFit, trainPC))
str(modelFit)
str(trainPC)
myTraining<-training[,grepl("^IL|diagnosis", names(training))]
myTesting <- testing[,grepl("^IL|diagnosis", names(testing))]
source('~/.active-rstudio-document', echo=TRUE)
confusionMatrix(myTraining$diagnosis, predict(modelFit, trainPC))
source('~/.active-rstudio-document', echo=TRUE)
str(trainPC)
str(modelFit)
source('~/.active-rstudio-document', echo=TRUE)
str(preProc)
source('~/.active-rstudio-document', echo=TRUE)
str(preProc)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
preProc <- preProcess(myTraining[,-1], method="pca", thresh = 0.9)
preProc$rotation
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
modelFit <- train(IL_Training$diagnosis ~ ., method="glm", data=trainPC)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
subset(testing, select=-diagnosis)
str(subset(testing, select=-diagnosis))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("xlsReadWrite")
install.packages("gdata")
source('~/.active-rstudio-document', echo=TRUE)
View(data)
View(data)
data$zeit
?cut
time <- rep(1:10, 10)
replicate <- sort(time)
value <- rnorm(100)
df <- data.frame(replicate, time, value)
View(df)
View(df)
require(data.table)
dt <- data.table(df)
dt[, mean(value), by="replicate"]
install.packages("data.table")
require(data.table)
dt <- data.table(df)
dt[, mean(value), by="replicate"]
head(data,29)
t<-head(data,29)
x<-t$zaehler
y<-c(0,x)
x-y
z<-x-y
z[z>1 and z<-1]
z[z>1]
z[z>1 | z<-1]
z[z>1 | z< -1]
a<-z[z>1 | z< -1]
a
a[[a>0]]-1
a[[a>0]]
a[a>0]
a[a>0]+1
a[a>0]-1
a[a<0]+1
a[a<0]<-a[a<0]+1
a[a>0]<-a[a>0]-1
a
b<-a*-1
b
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
c<-1:length(a)/2
c<-1:(length(a)/2)
d<-(1:(length(a)/2))*-1
e<-c(rbind(c,d))
f<-rep(e,abs(b))
View(f)
source('~/.active-rstudio-document', echo=TRUE)
length(e)
length(f)
length(data$zaehler)
View(data)
length(x)
length(y)
length(z)
length(a)
sum(abs(a))
s<-sort(data$zaehler)
max(sort)
max(s)
min(s)
s[s==0]
a[a==0]
a[a==1]
a[a==-1]
a
sum(head(a,64))
sum(abs(head(a,64)))
sum(B)
sum(abs(b))
b
source('~/.active-rstudio-document', echo=TRUE)
size(data$zaehler)
length(data$zaehler)
length(x)
length(y)
length(z)
length(a)
length(b)
sum(abs(b))
b
source('~/.active-rstudio-document', echo=TRUE)
sum(abs(b))
length(x)
length(y)
length(z)
sum(a)
sum(abs(a))
sum(abs(b))
b
data$zaehler
data$zaehler[data$zaehller == 0]
sort(data$zaehler)
length(c)
length(d)
length(b)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
length(e)
length(b)
sum(abs(b))
head(data)
head(data,-5)
head(data,-5)
f
max(f)
min(f)
tail(f,20)
b
f
tail(f)
tail(f,20)
tail(f,40)
length8E
length(e)
length(f)
x[length(x)]
tail(z)
source('~/.active-rstudio-document', echo=TRUE)
tail(b)
tail(b,10)
length(b)
sum(abs(b))
length(data$zaehler)
tail(e)
tail(f)
source('~/.active-rstudio-document', echo=TRUE)
tail(f)
length(e)
length(b)
source('~/.active-rstudio-document', echo=TRUE)
tail(f)
tail(f,20)
source('~/.active-rstudio-document', echo=TRUE)
tail(f,100)
length(g)
length(b)
sign(b)
b[11]
b[12]
b[13]
b[10]
sum(b[1..12])
sum(head(b,12))
b[10]
b[11]
b[12]
z[140]
z[141]
r<-112:140
data1<-data[-r,]
source('~/.active-rstudio-document', echo=TRUE)
dim(orig)
dim(data)
length(x)
length(y)
length(z)
length(a)
sum(a)
sum(abs(a))
length(b)
sum(abs(b))
length(c)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
dt <- data.table(data)
dt[max(zeit), by="wipe"]
source('~/.active-rstudio-document', echo=TRUE)
dt[,max(zeit), by="wipe"]
result<-dt[,max(zeit), by="wipe"]
head(result)
head(result(result$wipe > 0))
head(result(result$wipe > 0))
head(result[result$wipe>0])
plot(result[result$wipe>0])
plot(result[result$wipe>0])
plot(result[result$wipe<0])
plot(result[result$wipe<0],t="l")
plot(result[result$wipe>0],t="l")
plot(result[result$wipe<0],t="l")
resultd<-dt[,max(distance), by="wipe"]
resultd<-dt[,max(distanz), by="wipe"]
plot(resultd[result$wipe<0],t="l")
plot(resultd[result$wipe>0],t="l")
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
resultd1<-remove_outliers(resultd)
q
quit
exit
q
break
boxplot(resultd)
boxplot(resultd$V1)
resultd1<-resultd[!resultd$V1 %in% boxplot.stats(resultd$V1)$out]
boxplot(resultd1$V1)
plot(resultd1[result$wipe>0],t="l")
plot(resultd1[resultd1$wipe>0],t="l")
plot(resultd1[resultd1$wipe<0],t="l")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
max(result_dist1[result_dist1$wipe<0]$V1)
min(result_dist1[result_dist1$wipe<0]$V1)
hist(result_dist1[result_dist1$wipe<0]$V1)
source('~/walt_xls.R', echo=TRUE)
result_dist2 <- result_dist1[result_dist$wipe<0 & result_dist1$V1>-100,]
result_dist2 <- result_dist1[result_dist$wipe<0 && result_dist1$V1>-100,]
result_dist1[result_dist$wipe<0 && result_dist1$V1>-100,]$V1 <- NA
source('~/walt_xls.R', echo=TRUE)
source('~/walt_xls.R', echo=TRUE)
length(result_dist1$V1)
length(result_dist1[result_dist1$wipe<0 && result_dist1$V1>-100,]$V1)
length(result_dist1[result_dist1$wipe<0 && result_dist1$V1>-100,])
result_dist1[result_dist1$wipe<0 && result_dist1$V1>-100,]
result_dist1[result_dist1$V1>-100,]
result_dist1[result_dist1$wipe<0 && result_dist1$V1>-100,]
View(result_dist1)
View(result_dist1[result_dist1$wipe<0 && result_dist1$V1>-100,])
View(result_dist1[result_dist1$V1>-100,])
source('~/walt_xls.R', echo=TRUE)
View(result_dist1)
result_dist1[result_dist1$V1<-100,]$V1
result_dist1[result_dist1$V1<-100,]
View(result_dist1)
source('~/walt_xls.R', echo=TRUE)
source('~/walt_xls.R', echo=TRUE)
source('~/walt_xls.R', echo=TRUE)
rm(list = ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
model = train(y ~ ., method = 'rf', data = vowel.train, prox = TRUE)  # This takes some time...
print(model)
vi = varImp(model$finalModel)
vi = data.frame(var = 1:nrow(vi), imp = vi$Overall)
vi[order(vi$imp),]
install.packages("ElemStatLearn")
rm(list = ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
model = train(y ~ ., method = 'rf', data = vowel.train, prox = TRUE)  # This takes some time...
print(model)
vi = varImp(model$finalModel)
vi = data.frame(var = 1:nrow(vi), imp = vi$Overall)
vi[order(vi$imp),]
library()
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
install.packages("rattle")
rm(list = ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
model = train(y ~ ., method = 'rf', data = vowel.train, prox = TRUE)  # This takes some time...
print(model)
vi = varImp(model$finalModel)
vi = data.frame(var = 1:nrow(vi), imp = vi$Overall)
vi[order(vi$imp),]
setwd("~/Documents/coursera/dataScience/MachineLearning")
setwd("~/Documents/coursera/dataScience/MachineLearning")
if(!file.exists("data")) {
dir.create("data")
}
if(!file.exists('./data/pml-training.csv')) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileUrl,
destfile="./data/pml-training.csv",
method="curl")
dateDownloaded_training <- date()
}
training <- read.csv("./data/pml-training.csv", header = TRUE)
if(!file.exists('./data/pml-testing.csv')) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileUrl,
destfile="./data/pml-testing.csv",
method="curl")
dateDownloaded_testing <- date()
}
testing <- read.csv("./data/pml-testing.csv", header = TRUE)
View(training)
View(training)
View(training)
View(training)
names(training)
source('~/.active-rstudio-document', echo=TRUE)
names(training)
install.packages("doParallel")
install.packages("parallel")
install.packages("parallel")
install.packages("doParallel")
install.packages("parallel")
require(parallel)
library(parallel)
detectCores()
install.packages("confusionMatrix")
library(confusionMatrix)
install.packages("RCurl")
